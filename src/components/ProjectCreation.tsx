import React, { useState, useEffect } from "react";
import * as FaIcons from "react-icons/fa";
import Select from "react-select";
import { useHasMounted } from "@/components/useHasMounted";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import Stack from "@mui/material/Stack";
import Button from "@mui/material/Button";
import { getChatResponse } from "@/openai/openai";

// 'options' will later be replaced by table skills in database
const listOfClients = [
  { value: "JohnDoeID", label: "John Doe" },
  { value: "AndresFuentesID", label: "Andres Fuentes" },
  { value: "CatalinaFernandezID", label: "Catalina Fernandez" },
];

const ProjectCreation = () => {
  const hasMounted = useHasMounted();
  // React Hooks for managing component state
  //const [listOfClients, setClients] = useState<string[]>([]);
  const [client, setClient] = useState<string>("");
  const [projectDescription, setProjectDescription] = useState<string>("");
  //const [typeProjects, setTypeProjects] = useState<string>("");
  const [response, setResponse] = useState("");

  const [tarea, setTarea] = useState([]);
  const [startDate, setStartDate] = useState(new Date());
  const [endDate, setEndDate] = useState(new Date());

  /*const handleSendForm = () => {
    alert("Wizeline debe pagar las juntadas al Toshi Tiger");
  };*/

  const handleSendForm = () => {
    const messages = [{ role: "user", content: "En mi empresa estamos a punto de realizar un proyecto. La descripción es la siguiente: " + projectDescription + ". Antes que nada, necesito que tu respuesta esté en texto pero siguiendo el formato JSON. Bajo esta descripción necesito que primero escribas una sección llamada \"Descripción del proyecto\" donde optimices la descripción del proyecto que te mencioné, después necesito que me enlistes los requerimientos funcionales con sus historias de usuario y cada una con sus listas de casos de uso y criterios de aceptación, finaliza con los requerimientos no funcionales con lo mismo que los requerimientos funcionales. A los requerimientos funcionales dales un nombre y un identificador iniciando con RF, mientras que los requerimientos no funcionales RNF, las historias de usuario iniciando con HU, los casos de uso iniciando con CU y a cada criterio de aceptación dale un identificador iniciando con CA."}];
    getChatResponse(messages).then((res) => {
      console.log(res);
      setResponse(res);
    });
  };


  // const handleChangeTechnology = (selectedOptions: ValueType<OptionTypeBase>) works as well but with the error.
  // The above commented out code can be used as an alternative, but it may result in an error.
  // In this implementation, the type of `selectedOptions` is set to `any` to prevent the error.
  const handleChangeClient = (e: any) => {
    setClient(e.value);
  };

  // useHasMounted.tsx ensures correct server-side rendering in Next.JS when using the react-select library.
  // For more information, refer to the file inside src/components/useHasMounted.tsx.
  if (!hasMounted) {
    return null;
  }

  return (
    <>
      <div className="container bg-light border p-4">
        <div className="mb-4">
          <Select
            options={listOfClients} // sets the available options for the Select component
            value={listOfClients.find((obj) => obj.value === client)} // sets the currently selected option(s). Use when isMulti is specified.
            onChange={handleChangeClient} // sets the callback function to handle changes in selected option(s)
            placeholder="Select client..."
          />

          {/* Experience input field */}
          <label className="form-label">Project description...</label>
          <textarea
            className="form-control"
            id="projectDescription"
            autoComplete="off"
            onChange={(e) => setProjectDescription(e.target.value)}
            value={projectDescription}
            placeholder="General description of the project..."
            rows="6"
            required
          />
          {/* Submit button */}
          <button className="btn btn-primary mt-3" onClick={handleSendForm}>
            <FaIcons.FaBrain className="mb-1" />
            &nbsp;&nbsp;Generate
          </button>

          <br></br>
          <br></br>

          {/* Descripition of the project generated by AI */}
          <label className="form-label">
            AI-generated project description...
          </label>

          <textarea
            rows="15"
            className="form-control"
            id="projectDescription"
            autoComplete="off"
            value={response}
            placeholder="AI's response will generate after clicking the Generate button..."
          />

          <br></br>

          <div className="container">
            <div className="row">
              {/* Start date calendar */}
              <div className="col-sm">
                <label className="form-label">
                  Order Start Date
                </label>

                <DatePicker
                  selected={startDate}
                  onChange={(date: Date) => setStartDate(date)}
                />
              </div>

              {/* End date calendar */}
              <div className="col-sm">
                <label className="form-label">Order End Date</label>

                <DatePicker
                  selected={endDate}
                  onChange={(date: Date) => setEndDate(date)}
                />
              </div>

              {/* Order status buttons */}
              <div className="col-sm">
                <Stack direction="column" spacing={6}>
                  <label
                    style={{ className: "form-label", textAlign: "center" }}
                  >
                    Order Status
                  </label>

                  <Button variant="contained" color="success">
                    Approved
                  </Button>
                  <Button variant="contained" color="warning">
                    Pending
                  </Button>
                  <Button variant="contained" color="error">
                    Rejected
                  </Button>

                </Stack>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default ProjectCreation;
