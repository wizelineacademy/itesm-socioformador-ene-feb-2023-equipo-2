import React, { useState, useEffect } from "react";
import * as FaIcons from "react-icons/fa";
import Select from "react-select";
import { useHasMounted } from "@/components/useHasMounted";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import Stack from "@mui/material/Stack";
import Button from "@mui/material/Button";

// 'options' will later be replaced by table skills in database
const listOfClients = [
  { value: "JohnDoeID", label: "John Doe" },
  { value: "AndresFuentesID", label: "Andres Fuentes" },
  { value: "CatalinaFernandezID", label: "Catalina Fernandez" },
];

const ProjectCreation = () => {
  const hasMounted = useHasMounted();
  // React Hooks for managing component state
  //const [listOfClients, setClients] = useState<string[]>([]);
  const [client, setClient] = useState<string>("");
  const [projectDescription, setProjectDescription] = useState<string>("");
  //const [typeProjects, setTypeProjects] = useState<string>("");

  const [tarea, setTarea] = useState([]);
  const [startDate, setStartDate] = useState(new Date());
  const [endDate, setEndDate] = useState(new Date());

  const handleSendForm = () => {
    alert("Wizeline debe pagar las juntadas al Toshi Tiger");
  };

  // const handleChangeTechnology = (selectedOptions: ValueType<OptionTypeBase>) works as well but with the error.
  // The above commented out code can be used as an alternative, but it may result in an error.
  // In this implementation, the type of `selectedOptions` is set to `any` to prevent the error.
  const handleChangeClient = (e: any) => {
    setClient(e.value);
  };

  // useHasMounted.tsx ensures correct server-side rendering in Next.JS when using the react-select library.
  // For more information, refer to the file inside src/components/useHasMounted.tsx.
  if (!hasMounted) {
    return null;
  }

  return (
    <>
      <div className="container bg-light border p-4">
        <div className="mb-4">
          <Select
            options={listOfClients} // sets the available options for the Select component
            value={listOfClients.find((obj) => obj.value === client)} // sets the currently selected option(s). Use when isMulti is specified.
            onChange={handleChangeClient} // sets the callback function to handle changes in selected option(s)
            placeholder="Seleccionar cliente..."
          />

          {/* Experience input field */}
          <label className="form-label">Descripción de la orden</label>
          <textarea
            className="form-control"
            id="projectDescription"
            autoComplete="off"
            onChange={(e) => setProjectDescription(e.target.value)}
            value={projectDescription}
            placeholder="Descripción general del proyecto..."
            rows="6"
            required
          />
          {/* Submit button */}
          <button className="btn btn-primary mt-3" onClick={handleSendForm}>
            <FaIcons.FaBrain className="mb-1" />
            &nbsp;&nbsp;Generar descripción profunda
          </button>

          <br></br>
          <br></br>

          {/* Descripition of the project generated by AI */}
          <label className="form-label">
            Descripción profunda del proyecto
          </label>

          <textarea
            rows="15"
            className="form-control"
            id="projectDescription"
            autoComplete="off"
            onChange={(e) => setProjectDescription(e.target.value)}
            value={
              "Descripción generada por la AI: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nRequerimientos funcionales:\n\nRequerimientos no funcionales:\n\nHistorias de usuario:\n\nCriterios de aceptación\n\nCasos de prueba:"
            }
            required
          />

          <br></br>

          <div className="container">
            <div className="row">
              {/* Start date calendar */}
              <div className="col-sm">
                <label className="form-label">
                  Fecha de inicio de la orden
                </label>

                <DatePicker
                  selected={startDate}
                  onChange={(date: Date) => setStartDate(date)}
                />
              </div>

              {/* End date calendar */}
              <div className="col-sm">
                <label className="form-label">Fecha de fin de la orden</label>

                <DatePicker
                  selected={endDate}
                  onChange={(date: Date) => setEndDate(date)}
                />
              </div>

              {/* Order status buttons */}
              <div className="col-sm">
                <Stack direction="column" spacing={6}>
                  <label
                    style={{ className: "form-label", textAlign: "center" }}
                  >
                    Estatus de la orden
                  </label>
                  <Button variant="contained" color="success">
                    Orden Aprobada
                  </Button>
                  <Button variant="contained" color="warning">
                    Orden Pendiente
                  </Button>
                  <Button variant="contained" color="error">
                    Orden Rechazada
                  </Button>
                </Stack>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default ProjectCreation;
